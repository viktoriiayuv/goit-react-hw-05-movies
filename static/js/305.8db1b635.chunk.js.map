{"version":3,"file":"static/js/305.8db1b635.chunk.js","mappings":"iNAGaA,EAAaC,EAAAA,GAAAA,GAAH,0DAMVC,GAAOD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,mK,SCcjB,EAnBe,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACVC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACN,EAAD,UACGI,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAACP,EAAD,CAAMQ,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,SACGI,KAFID,EADC,KASjB,C,yICfYK,EAAYZ,EAAAA,GAAAA,IAAH,gFAQTa,EAAab,EAAAA,GAAAA,KAAH,gc,SCqCvB,EAzCmB,WAAO,IAAD,EACvB,GAA4Bc,EAAAA,EAAAA,UAAS,MAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAE/CC,EAAAA,EAAAA,YAAU,WACU,KAAdF,IAGJG,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,SAAApB,GAAM,OAAIY,EAAUZ,EAAd,IACXqB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACN,IAaJ,OACE,UAACP,EAAD,YACE,UAACC,EAAD,CAAYe,SARK,SAAAC,GACnBA,EAAMC,iBACN,IAPwBC,EAOlBC,EAAcH,EAAMI,OAAOC,SAASC,QAAQC,MAAMC,OALxDnB,EAD6B,MADLa,EAQNC,GAPgB,CAAED,MAAAA,GAAU,CAAC,EAQhD,EAIG,WACE,kBAAOO,KAAK,OAAOC,KAAK,aACxB,mBAAQD,KAAK,SAAb,uBAEDnC,IACEA,EAAOqC,OAAS,GACf,SAACC,EAAA,EAAD,CAAQtC,OAAQA,KAEhB,yDAIT,C,+LCrCM,SAAeuC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,sBADxB,cACCC,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAexB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCa,GAAjC,wFACkBQ,EAAAA,EAAAA,GAAM,uBAAD,OAAwBR,IAD/C,cACCS,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BxC,GAA/B,wFACkBoC,EAAAA,EAAAA,GAAM,UAAD,OAAWpC,IADlC,cACCqC,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BzC,GAA/B,wFACkBoC,EAAAA,EAAAA,GAAM,UAAD,OAAWpC,EAAX,aADvB,cACCqC,EADD,yBAEEA,EAASC,KAAKI,MAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+B3C,GAA/B,wFACkBoC,EAAAA,EAAAA,GAAM,UAAD,OAAWpC,EAAX,aADvB,cACCqC,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAzBPH,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBQ,QAHc,mC","sources":["components/Movies/Movies.styled.jsx","components/Movies/Movies.jsx","pages/MoviesPage/MoviesPage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MoviesList = styled.ul`\n  li {\n    padding: 4px 0;\n  }\n`;\n\nexport const Link = styled(NavLink)`\n  font-size: 20px;\n  text-decoration: none;\n  color: #000000;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: #c02b51;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { MoviesList, Link } from './Movies.styled';\n\nconst Movies = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <MoviesList>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </MoviesList>\n  );\n};\n\nMovies.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Movies;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 0 28px;\n\n  p {\n    font-size: 18px;\n  }\n`;\n\nexport const SearchForm = styled.form`\n  input {\n    width: 250px;\n    padding: 4px;\n    font-size: 18px;\n    outline: none;\n    border: 1px solid black;\n\n    &:focus {\n      border-color: #706f6f;\n    }\n  }\n\n  button {\n    width: 75px;\n    padding: 4px;\n    font-size: 18px;\n    font-weight: 600;\n    border: 1px solid black;\n    cursor: pointer;\n\n    &:focus,\n    &:hover {\n      border-color: #c02b51;\n      color: #c02b51;\n    }\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByKeyWord } from 'services/themoviedbAPI';\nimport Movies from 'components/Movies/Movies';\nimport { Container, SearchForm } from './MoviesPage.styled';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n    getMovieByKeyWord(movieName)\n      .then(movies => setMovies(movies))\n      .catch(error => console.log(error));\n  }, [movieName]);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const searchQuery = event.target.elements.keyword.value.trim();\n    updateQueryString(searchQuery);\n  };\n\n  return (\n    <Container>\n      <SearchForm onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"keyword\"></input>\n        <button type=\"submit\">Search</button>\n      </SearchForm>\n      {movies &&\n        (movies.length > 0 ? (\n          <Movies movies={movies} />\n        ) : (\n          <p>We did not find the movie.</p>\n        ))}\n    </Container>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst API_KEY = 'c32494ab48f2db4575ae8be81883e5e9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport async function getTrendingMovies() {\n  const response = await axios('trending/movie/day');\n  return response.data.results;\n}\n\nexport async function getMovieByKeyWord(keyword) {\n  const response = await axios(`/search/movie?query=${keyword}`);\n  return response.data.results;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios(`/movie/${id}`);\n  return response.data;\n}\n\nexport async function getMovieCredits(id) {\n  const response = await axios(`/movie/${id}/credits`);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios(`/movie/${id}/reviews`);\n  return response.data.results;\n}\n"],"names":["MoviesList","styled","Link","NavLink","movies","location","useLocation","map","id","title","to","state","from","Container","SearchForm","useState","setMovies","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","getMovieByKeyWord","then","catch","error","console","log","onSubmit","event","preventDefault","query","searchQuery","target","elements","keyword","value","trim","type","name","length","Movies","getTrendingMovies","axios","response","data","results","getMovieDetails","getMovieCredits","cast","getMovieReviews","api_key"],"sourceRoot":""}