{"version":3,"file":"static/js/736.a5d08620.chunk.js","mappings":"iPAEaA,EAAgBC,EAAAA,GAAAA,IAAH,0DAMbC,EAAWD,EAAAA,GAAAA,GAAH,sR,SCkCrB,EArCa,WACX,OAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAN,GAAI,OAAIC,EAAQD,EAAZ,IACTO,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACN,KAGF,SAACN,EAAD,UACGI,IACEA,EAAKW,OAAS,GACb,SAACb,EAAD,UACGE,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,0BACGF,IACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAKH,KAGT,4BACE,uBAAIA,KACJ,uCAAeC,UATVH,EADD,OAgBZ,mEAIT,C,+LChCM,SAAeM,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,sBADxB,cACCC,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBL,EAAAA,EAAAA,GAAM,uBAAD,OAAwBK,IAD/C,cACCJ,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bb,GAA/B,wFACkBO,EAAAA,EAAAA,GAAM,UAAD,OAAWP,IADlC,cACCQ,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAejB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BQ,GAA/B,wFACkBO,EAAAA,EAAAA,GAAM,UAAD,OAAWP,EAAX,aADvB,cACCQ,EADD,yBAEEA,EAASC,KAAKtB,MAFhB,kEAKA,SAAe2B,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bd,GAA/B,wFACkBO,EAAAA,EAAAA,GAAM,UAAD,OAAWP,EAAX,aADvB,cACCQ,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAzBPH,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBQ,QAHc,mC","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  p {\n    font-size: 18px;\n  }\n`;\n\nexport const CastList = styled.ul`\n  li {\n    width: 300px;\n    padding: 12px 0;\n    list-style: none;\n    border-bottom: 2px solid #858585;\n  }\n  img {\n    display: block;\n    margin-bottom: 12px;\n    max-width: 200px;\n  }\n  p {\n    font-size: 18px;\n    margin: 4px 0;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/themoviedbAPI';\nimport { CastList, CastContainer } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCredits(movieId)\n      .then(cast => setCast(cast))\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <CastContainer>\n      {cast &&\n        (cast.length > 0 ? (\n          <CastList>\n            {cast.map(({ id, profile_path, name, character }) => (\n              <li key={id}>\n                {profile_path && (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                  />\n                )}\n                <div>\n                  <p>{name}</p>\n                  <p>Character: {character}</p>\n                </div>\n              </li>\n            ))}\n          </CastList>\n        ) : (\n          <p>We don't have information about cast.</p>\n        ))}\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'c32494ab48f2db4575ae8be81883e5e9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport async function getTrendingMovies() {\n  const response = await axios('trending/movie/day');\n  return response.data.results;\n}\n\nexport async function getMovieByKeyWord(keyword) {\n  const response = await axios(`/search/movie?query=${keyword}`);\n  return response.data.results;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios(`/movie/${id}`);\n  return response.data;\n}\n\nexport async function getMovieCredits(id) {\n  const response = await axios(`/movie/${id}/credits`);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios(`/movie/${id}/reviews`);\n  return response.data.results;\n}\n"],"names":["CastContainer","styled","CastList","useState","cast","setCast","movieId","useParams","useEffect","getMovieCredits","then","catch","error","console","log","length","map","id","profile_path","name","character","src","alt","getTrendingMovies","axios","response","data","results","getMovieByKeyWord","keyword","getMovieDetails","getMovieReviews","api_key"],"sourceRoot":""}